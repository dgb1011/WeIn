
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  userType: 'userType',
  phone: 'phone',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  kajabiUserId: 'kajabiUserId',
  courseCompletionDate: 'courseCompletionDate',
  totalVerifiedHours: 'totalVerifiedHours',
  totalVideoHours: 'totalVideoHours',
  certificationStatus: 'certificationStatus',
  preferredSessionLength: 'preferredSessionLength',
  consultationPreferences: 'consultationPreferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsultantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  specialties: 'specialties',
  hourlyRate: 'hourlyRate',
  isActive: 'isActive',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsultationSessionScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  consultantId: 'consultantId',
  scheduledStart: 'scheduledStart',
  scheduledEnd: 'scheduledEnd',
  actualStart: 'actualStart',
  actualEnd: 'actualEnd',
  status: 'status',
  sessionType: 'sessionType',
  studentVerifiedAt: 'studentVerifiedAt',
  consultantVerifiedAt: 'consultantVerifiedAt',
  studentNotes: 'studentNotes',
  consultantNotes: 'consultantNotes',
  sessionRating: 'sessionRating',
  technicalIssuesReported: 'technicalIssuesReported',
  makeupSessionFor: 'makeupSessionFor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoSessionScalarFieldEnum = {
  id: 'id',
  consultationSessionId: 'consultationSessionId',
  roomId: 'roomId',
  recordingEnabled: 'recordingEnabled',
  recordingUrl: 'recordingUrl',
  recordingDurationSeconds: 'recordingDurationSeconds',
  videoQuality: 'videoQuality',
  connectionQualityAvg: 'connectionQualityAvg',
  bandwidthUsageMb: 'bandwidthUsageMb',
  technicalIssues: 'technicalIssues',
  sessionMetadata: 'sessionMetadata',
  createdAt: 'createdAt'
};

exports.Prisma.VideoParticipantScalarFieldEnum = {
  id: 'id',
  videoSessionId: 'videoSessionId',
  userId: 'userId',
  userType: 'userType',
  joinTime: 'joinTime',
  leaveTime: 'leaveTime',
  totalDurationSeconds: 'totalDurationSeconds',
  audioQualityAvg: 'audioQualityAvg',
  videoQualityAvg: 'videoQualityAvg',
  screenShareDurationSeconds: 'screenShareDurationSeconds',
  chatMessagesCount: 'chatMessagesCount',
  connectionInterruptions: 'connectionInterruptions',
  createdAt: 'createdAt'
};

exports.Prisma.ConsultantAvailabilityScalarFieldEnum = {
  id: 'id',
  consultantId: 'consultantId',
  availabilityType: 'availabilityType',
  dayOfWeek: 'dayOfWeek',
  specificDate: 'specificDate',
  startTime: 'startTime',
  endTime: 'endTime',
  maxSessions: 'maxSessions',
  bufferMinutes: 'bufferMinutes',
  isAvailable: 'isAvailable',
  bookingWindowDays: 'bookingWindowDays',
  minimumNoticeHours: 'minimumNoticeHours',
  autoApprove: 'autoApprove',
  timezone: 'timezone',
  recurringPattern: 'recurringPattern',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentDocumentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  documentType: 'documentType',
  fileName: 'fileName',
  fileSizeBytes: 'fileSizeBytes',
  filePath: 'filePath',
  mimeType: 'mimeType',
  extractedText: 'extractedText',
  uploadTimestamp: 'uploadTimestamp',
  reviewStatus: 'reviewStatus',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  versionNumber: 'versionNumber',
  replacesDocumentId: 'replacesDocumentId',
  autoValidationScore: 'autoValidationScore',
  requiresManualReview: 'requiresManualReview',
  createdAt: 'createdAt'
};

exports.Prisma.SessionHistoryScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  sessionDate: 'sessionDate',
  sessionDuration: 'sessionDuration',
  consultantId: 'consultantId',
  sessionType: 'sessionType',
  status: 'status',
  rating: 'rating',
  createdAt: 'createdAt'
};

exports.Prisma.ConsultantPaymentScalarFieldEnum = {
  id: 'id',
  consultantId: 'consultantId',
  paymentPeriod: 'paymentPeriod',
  totalHours: 'totalHours',
  hourlyRate: 'hourlyRate',
  totalAmount: 'totalAmount',
  paymentStatus: 'paymentStatus',
  paymentDate: 'paymentDate',
  sessionBreakdown: 'sessionBreakdown',
  createdAt: 'createdAt'
};

exports.Prisma.SystemHealthMetricScalarFieldEnum = {
  id: 'id',
  metricType: 'metricType',
  metricValue: 'metricValue',
  metricUnit: 'metricUnit',
  timestamp: 'timestamp',
  additionalData: 'additionalData',
  createdAt: 'createdAt'
};

exports.Prisma.InAppNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  data: 'data',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.ScheduledNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  priority: 'priority',
  scheduledFor: 'scheduledFor',
  status: 'status',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  priority: 'priority',
  sentAt: 'sentAt'
};

exports.Prisma.UserNotificationPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailEnabled: 'emailEnabled',
  smsEnabled: 'smsEnabled',
  inAppEnabled: 'inAppEnabled',
  pushEnabled: 'pushEnabled',
  quietHours: 'quietHours',
  notificationTypes: 'notificationTypes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  STUDENT: 'STUDENT',
  CONSULTANT: 'CONSULTANT',
  ADMIN: 'ADMIN'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.StudentStatus = exports.$Enums.StudentStatus = {
  ENROLLED: 'ENROLLED',
  CONSULTATION_ACCESS_GRANTED: 'CONSULTATION_ACCESS_GRANTED',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  READY_FOR_CERTIFICATION: 'READY_FOR_CERTIFICATION',
  CERTIFIED: 'CERTIFIED',
  SUSPENDED: 'SUSPENDED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW',
  RESCHEDULED: 'RESCHEDULED',
  TECHNICAL_ISSUE: 'TECHNICAL_ISSUE'
};

exports.AvailabilityType = exports.$Enums.AvailabilityType = {
  RECURRING_WEEKLY: 'RECURRING_WEEKLY',
  ONE_TIME: 'ONE_TIME',
  BLOCKED_TIME: 'BLOCKED_TIME',
  HOLIDAY_BLOCK: 'HOLIDAY_BLOCK'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  CONSULTATION_LOG: 'CONSULTATION_LOG',
  EVALUATION_FORM: 'EVALUATION_FORM',
  REFLECTION_PAPER: 'REFLECTION_PAPER',
  CASE_STUDY: 'CASE_STUDY',
  ADDITIONAL_REQUIREMENT: 'ADDITIONAL_REQUIREMENT',
  MAKEUP_DOCUMENTATION: 'MAKEUP_DOCUMENTATION'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  NEEDS_REVISION: 'NEEDS_REVISION',
  AUTO_APPROVED: 'AUTO_APPROVED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.ScheduledNotificationStatus = exports.$Enums.ScheduledNotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Student: 'Student',
  Consultant: 'Consultant',
  Admin: 'Admin',
  ConsultationSession: 'ConsultationSession',
  VideoSession: 'VideoSession',
  VideoParticipant: 'VideoParticipant',
  ConsultantAvailability: 'ConsultantAvailability',
  StudentDocument: 'StudentDocument',
  SessionHistory: 'SessionHistory',
  ConsultantPayment: 'ConsultantPayment',
  SystemHealthMetric: 'SystemHealthMetric',
  InAppNotification: 'InAppNotification',
  ScheduledNotification: 'ScheduledNotification',
  NotificationLog: 'NotificationLog',
  UserNotificationPreferences: 'UserNotificationPreferences'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
