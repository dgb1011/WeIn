// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for type safety
enum StudentStatus {
  ENROLLED
  CONSULTATION_ACCESS_GRANTED
  IN_PROGRESS
  PENDING_VERIFICATION
  READY_FOR_CERTIFICATION
  CERTIFIED
  SUSPENDED
  WITHDRAWN
}

enum SessionStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
  TECHNICAL_ISSUE
}

enum DocumentType {
  CONSULTATION_LOG
  EVALUATION_FORM
  REFLECTION_PAPER
  CASE_STUDY
  ADDITIONAL_REQUIREMENT
  MAKEUP_DOCUMENTATION
}

enum ReviewStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  NEEDS_REVISION
  AUTO_APPROVED
}

enum AvailabilityType {
  RECURRING_WEEKLY
  ONE_TIME
  BLOCKED_TIME
  HOLIDAY_BLOCK
}

enum UserType {
  STUDENT
  CONSULTANT
  ADMIN
}

enum SessionType {
  VIDEO_CONSULTATION
  PHONE_CONSULTATION
  IN_PERSON_CONSULTATION
}

// Core User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String
  lastName      String
  phone         String?
  timezone      String   @default("UTC")
  userType      UserType
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  student       Student?
  consultant    Consultant?
  admin         Admin?

  @@map("users")
}

// Students - Primary Users
model Student {
  id                    String        @id @default(cuid())
  userId                String        @unique
  kajabiUserId          String        @unique
  courseCompletionDate  DateTime
  totalVerifiedHours    Decimal       @default(0) @db.Decimal(5, 2)
  totalVideoHours       Decimal       @default(0) @db.Decimal(5, 2)
  certificationStatus   StudentStatus @default(ENROLLED)
  preferredSessionLength Int          @default(60)
  consultationPreferences Json?       @default("{}")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultationSessions  ConsultationSession[]
  documents             StudentDocument[]
  certifications        Certification[]
  sessionHistory        SessionHistory[]

  @@map("students")
}

// Consultants - Secondary Users
model Consultant {
  id                    String        @id @default(cuid())
  userId                String        @unique
  bio                   String?
  specialties           String[]
  hourlyRate            Decimal       @db.Decimal(8, 2)
  isActive              Boolean       @default(true)
  totalSessions         Int           @default(0)
  averageRating         Decimal       @default(0) @db.Decimal(3, 2)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultationSessions  ConsultationSession[]
  availability          ConsultantAvailability[]
  payments              ConsultantPayment[]

  @@map("consultants")
}

// Admins - Tertiary Users
model Admin {
  id                    String        @id @default(cuid())
  userId                String        @unique
  role                  String        @default("admin")
  permissions           String[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Consultation Sessions
model ConsultationSession {
  id                    String        @id @default(cuid())
  studentId             String
  consultantId          String
  scheduledStart        DateTime
  scheduledEnd          DateTime
  actualStart           DateTime?
  actualEnd             DateTime?
  status                SessionStatus @default(SCHEDULED)
  sessionType           SessionType   @default(VIDEO_CONSULTATION)
  studentVerifiedAt     DateTime?
  consultantVerifiedAt  DateTime?
  studentNotes          String?
  consultantNotes       String?
  sessionRating         Int?
  technicalIssuesReported Boolean     @default(false)
  makeupSessionFor      String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  student               Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  consultant            Consultant    @relation(fields: [consultantId], references: [id])
  videoSession          VideoSession?
  makeupSession         ConsultationSession? @relation("MakeupSessions", fields: [makeupSessionFor], references: [id])

  @@map("consultation_sessions")
}

// Video Sessions
model VideoSession {
  id                    String        @id @default(cuid())
  consultationSessionId String        @unique
  roomId                String        @unique
  recordingEnabled      Boolean       @default(true)
  recordingUrl          String?
  recordingDurationSeconds Int?
  videoQuality          String        @default("720p")
  connectionQualityAvg  Decimal?      @db.Decimal(3, 2)
  bandwidthUsageMb      Decimal?      @db.Decimal(10, 2)
  technicalIssues       Json?         @default("[]")
  sessionMetadata       Json?         @default("{}")
  createdAt             DateTime      @default(now())

  // Relations
  consultationSession   ConsultationSession @relation(fields: [consultationSessionId], references: [id], onDelete: Cascade)
  participants          VideoParticipant[]

  @@map("video_sessions")
}

// Video Participants
model VideoParticipant {
  id                    String        @id @default(cuid())
  videoSessionId        String
  userId                String
  userType              UserType
  joinTime              DateTime
  leaveTime             DateTime?
  totalDurationSeconds  Int?
  audioQualityAvg       Decimal?      @db.Decimal(3, 2)
  videoQualityAvg       Decimal?      @db.Decimal(3, 2)
  screenShareDurationSeconds Int      @default(0)
  chatMessagesCount     Int           @default(0)
  connectionInterruptions Int         @default(0)
  createdAt             DateTime      @default(now())

  // Relations
  videoSession          VideoSession  @relation(fields: [videoSessionId], references: [id], onDelete: Cascade)

  @@map("video_participants")
}

// Consultant Availability
model ConsultantAvailability {
  id                    String            @id @default(cuid())
  consultantId          String
  availabilityType      AvailabilityType
  dayOfWeek             Int?
  specificDate          DateTime?
  startTime             String
  endTime               String
  maxSessions           Int               @default(1)
  bufferMinutes         Int               @default(15)
  isAvailable           Boolean           @default(true)
  bookingWindowDays     Int               @default(30)
  minimumNoticeHours    Int               @default(24)
  autoApprove           Boolean           @default(true)
  timezone              String
  recurringPattern      Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  consultant            Consultant        @relation(fields: [consultantId], references: [id], onDelete: Cascade)

  @@map("consultant_availability")
}

// Student Documents
model StudentDocument {
  id                    String        @id @default(cuid())
  studentId             String
  documentType          DocumentType
  fileName              String
  fileSizeBytes         Int
  filePath              String
  mimeType              String
  extractedText         String?
  uploadTimestamp       DateTime      @default(now())
  reviewStatus          ReviewStatus  @default(PENDING)
  reviewedBy            String?
  reviewedAt            DateTime?
  reviewNotes           String?
  versionNumber         Int           @default(1)
  replacesDocumentId    String?
  autoValidationScore   Decimal?      @db.Decimal(3, 2)
  requiresManualReview  Boolean       @default(true)
  createdAt             DateTime      @default(now())

  // Relations
  student               Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_documents")
}

// Certifications
model Certification {
  id                    String        @id @default(cuid())
  studentId             String
  certificateNumber     String        @unique
  issuedDate            DateTime
  certificationType     String        @default("EMDR_Basic")
  totalConsultationHours Decimal
  totalVideoHours       Decimal
  consultantCount       Int
  documentVerificationComplete Boolean
  certificatePdfPath    String?
  certificatePdfSizeBytes Int?
  verificationCode      String        @unique
  qrCodeData            String?
  deliveryEmailSentAt   DateTime?
  downloadCount         Int           @default(0)
  lastDownloadedAt      DateTime?
  isRevoked             Boolean       @default(false)
  revocationReason      String?
  revokedAt             DateTime?
  kajabiTagsUpdated     Boolean       @default(false)
  directoryProcessInitiated Boolean   @default(false)
  createdAt             DateTime      @default(now())

  // Relations
  student               Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

// Consultant Payments
model ConsultantPayment {
  id                    String        @id @default(cuid())
  consultantId          String
  paymentPeriod         String        // e.g., "2024-01"
  totalHours            Decimal       @db.Decimal(5, 2)
  hourlyRate            Decimal       @db.Decimal(8, 2)
  totalAmount           Decimal       @db.Decimal(10, 2)
  paymentStatus         String        @default("PENDING")
  paymentDate           DateTime?
  sessionBreakdown      Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  consultant            Consultant    @relation(fields: [consultantId], references: [id], onDelete: Cascade)

  @@map("consultant_payments")
}

// Session History for Analytics
model SessionHistory {
  id                    String        @id @default(cuid())
  studentId             String
  sessionDate           DateTime
  sessionDuration       Int           // in minutes
  consultantId          String?
  sessionType           SessionType
  status                SessionStatus
  rating                Int?
  notes                 String?
  createdAt             DateTime      @default(now())

  // Relations
  student               Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("session_history")
}

// System Health Metrics
model SystemHealthMetric {
  id                    String        @id @default(cuid())
  metricType            String
  metricValue           Decimal       @db.Decimal(10, 4)
  metricUnit            String?
  timestamp             DateTime      @default(now())
  additionalData        Json?         @default("{}")
  createdAt             DateTime      @default(now())

  @@map("system_health_metrics")
} 