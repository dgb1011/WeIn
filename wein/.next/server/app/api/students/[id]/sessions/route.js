(()=>{var e={};e.id=2867,e.ids=[2867],e.modules={3524:e=>{"use strict";e.exports=require("@prisma/client")},399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9348:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},412:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},5893:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>m,routeModule:()=>c,serverHooks:()=>p,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>h});var a={};s.r(a),s.d(a,{GET:()=>l});var r=s(2412),n=s(4293),i=s(4147),u=s(7856),o=s(5169);async function l(e,t){try{let s=(await t.params).id,{searchParams:a}=new URL(e.url),r=a.get("status")?.split(","),n=parseInt(a.get("limit")||"20"),i=parseInt(a.get("offset")||"0"),l=await o.V.getStudentSessions(s,{status:r,limit:n,offset:i});return u.NextResponse.json(l)}catch(e){return console.error("Error fetching student sessions:",e),u.NextResponse.json({error:"Failed to fetch student sessions"},{status:500})}}let c=new r.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/students/[id]/sessions/route",pathname:"/api/students/[id]/sessions",filename:"route",bundlePath:"app/api/students/[id]/sessions/route"},resolvedPagePath:"/Users/dgb_1011/Desktop/WeIn/WeIn/wein/src/app/api/students/[id]/sessions/route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:d,workUnitAsyncStorage:h,serverHooks:p}=c;function m(){return(0,i.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:h})}},5303:()=>{},4871:(e,t,s)=>{"use strict";s.d(t,{db:()=>r});var a=s(3524);let r=globalThis.prisma??new a.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}}});process.on("beforeExit",async()=>{await r.$disconnect()})},5169:(e,t,s)=>{"use strict";s.d(t,{V:()=>r});var a=s(4871);class r{static async getStudentProgress(e){let t=await a.db.consultationSession.findMany({where:{studentId:e},include:{consultant:{include:{user:!0}}}}),s=t.filter(e=>"COMPLETED"===e.status&&e.consultantVerifiedAt),r=t.filter(e=>"COMPLETED"===e.status&&!e.consultantVerifiedAt),n=t.filter(e=>"SCHEDULED"===e.status||"CONFIRMED"===e.status),i=s.reduce((e,t)=>e+this.calculateSessionDuration(t),0),u=r.reduce((e,t)=>e+this.calculateSessionDuration(t),0),o=n.reduce((e,t)=>e+this.calculateSessionDuration(t),0),l=Math.min(i/40*100,100),c=Math.max(40-i,0),d=this.estimateCompletionDate(i,o,t),h=this.calculateWeeklyProgress(t),p=this.getMilestoneStatus(i);return{verifiedHours:i,pendingHours:u,projectedHours:o,completionPercentage:l,remainingHours:c,estimatedCompletionDate:d,weeklyProgress:h,milestoneStatus:p,consultantDistribution:this.analyzeConsultantDistribution(t)}}static async updateStudentStatus(e,t){await a.db.student.update({where:{id:e},data:{certificationStatus:t}})}static async getStudentSessions(e,t={}){let{status:s,limit:r=20,offset:n=0}=t,i={studentId:e};s&&s.length>0&&(i.status={in:s});let u=await a.db.consultationSession.findMany({where:i,include:{consultant:{include:{user:!0}},videoSession:!0},orderBy:{scheduledStart:"desc"},take:r,skip:n}),o=await a.db.consultationSession.count({where:i});return{sessions:u,total:o,hasMore:n+r<o}}static calculateSessionDuration(e){return e.actualStart&&e.actualEnd?(new Date(e.actualEnd).getTime()-new Date(e.actualStart).getTime())/36e5:(new Date(e.scheduledEnd).getTime()-new Date(e.scheduledStart).getTime())/36e5}static estimateCompletionDate(e,t,s){if(e>=40)return null;let a=s.filter(e=>"COMPLETED"===e.status&&e.consultantVerifiedAt);if(0===a.length)return null;let r=new Date(Math.min(...a.map(e=>new Date(e.scheduledStart).getTime()))),n=e/Math.max((new Date(Math.max(...a.map(e=>new Date(e.scheduledStart).getTime()))).getTime()-r.getTime())/6048e5,1);if(n<=0)return null;let i=new Date;return i.setDate(i.getDate()+(40-e)/n*7),i}static calculateWeeklyProgress(e){let t=e.filter(e=>"COMPLETED"===e.status&&e.consultantVerifiedAt),s={};return t.forEach(e=>{let t=this.getWeekStart(new Date(e.scheduledStart)).toISOString().split("T")[0];s[t]||(s[t]={hours:0,sessions:0}),s[t].hours+=this.calculateSessionDuration(e),s[t].sessions+=1}),Object.entries(s).map(([e,t])=>({week:e,hours:t.hours,sessions:t.sessions})).sort((e,t)=>e.week.localeCompare(t.week))}static getWeekStart(e){let t=new Date(e),s=t.getDay(),a=t.getDate()-s+(0===s?-6:1);return new Date(t.setDate(a))}static getMilestoneStatus(e){let t=[{name:"Getting Started",hours:0},{name:"First 10 Hours",hours:10},{name:"Quarter Complete",hours:25},{name:"Halfway There",hours:20},{name:"Almost There",hours:30},{name:"Final Stretch",hours:35},{name:"Certification Ready",hours:40}],s=t[0],a=t[1];for(let r=0;r<t.length-1;r++)if(e>=t[r].hours&&e<t[r+1].hours){s=t[r],a=t[r+1];break}let r=a.hours>s.hours?(e-s.hours)/(a.hours-s.hours)*100:100;return{currentMilestone:s.name,nextMilestone:a.name,progressToNext:Math.min(r,100)}}static analyzeConsultantDistribution(e){let t={};return e.forEach(e=>{if("COMPLETED"===e.status&&e.consultantVerifiedAt){let s=e.consultant.id,a=`${e.consultant.user.firstName} ${e.consultant.user.lastName}`;t[s]||(t[s]={consultantId:s,consultantName:a,hours:0,sessions:0}),t[s].hours+=this.calculateSessionDuration(e),t[s].sessions+=1}}),Object.values(t).sort((e,t)=>t.hours-e.hours)}}}};var t=require("../../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),a=t.X(0,[3267,8814],()=>s(5893));module.exports=a})();