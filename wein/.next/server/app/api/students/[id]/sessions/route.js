(()=>{var t={};t.id=867,t.ids=[867],t.modules={3524:t=>{"use strict";t.exports=require("@prisma/client")},399:t=>{"use strict";t.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:t=>{"use strict";t.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9348:t=>{"use strict";t.exports=require("next/dist/server/app-render/work-async-storage.external.js")},412:t=>{"use strict";t.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},5893:(t,e,s)=>{"use strict";s.r(e),s.d(e,{patchFetch:()=>m,routeModule:()=>c,serverHooks:()=>p,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>h});var a={};s.r(a),s.d(a,{GET:()=>l});var r=s(2412),n=s(4293),i=s(4147),u=s(7856),o=s(5169);async function l(t,e){try{let s=(await e.params).id,{searchParams:a}=new URL(t.url),r=a.get("status")?.split(","),n=parseInt(a.get("limit")||"20"),i=parseInt(a.get("offset")||"0"),l=await o.V.getStudentSessions(s,{status:r,limit:n,offset:i});return u.NextResponse.json(l)}catch(t){return console.error("Error fetching student sessions:",t),u.NextResponse.json({error:"Failed to fetch student sessions"},{status:500})}}let c=new r.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/students/[id]/sessions/route",pathname:"/api/students/[id]/sessions",filename:"route",bundlePath:"app/api/students/[id]/sessions/route"},resolvedPagePath:"/Users/dgb_1011/Desktop/WeIn/WeIn/wein/src/app/api/students/[id]/sessions/route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:d,workUnitAsyncStorage:h,serverHooks:p}=c;function m(){return(0,i.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:h})}},5303:()=>{},4871:(t,e,s)=>{"use strict";s.d(e,{db:()=>r});var a=s(3524);let r=globalThis.prisma??new a.PrismaClient},5169:(t,e,s)=>{"use strict";s.d(e,{V:()=>r});var a=s(4871);class r{static async getStudentProgress(t){let e=await a.db.consultationSession.findMany({where:{studentId:t},include:{consultant:{include:{user:!0}}}}),s=e.filter(t=>"COMPLETED"===t.status&&t.consultantVerifiedAt),r=e.filter(t=>"COMPLETED"===t.status&&!t.consultantVerifiedAt),n=e.filter(t=>"SCHEDULED"===t.status||"CONFIRMED"===t.status),i=s.reduce((t,e)=>t+this.calculateSessionDuration(e),0),u=r.reduce((t,e)=>t+this.calculateSessionDuration(e),0),o=n.reduce((t,e)=>t+this.calculateSessionDuration(e),0),l=Math.min(i/40*100,100),c=Math.max(40-i,0),d=this.estimateCompletionDate(i,o,e),h=this.calculateWeeklyProgress(e),p=this.getMilestoneStatus(i);return{verifiedHours:i,pendingHours:u,projectedHours:o,completionPercentage:l,remainingHours:c,estimatedCompletionDate:d,weeklyProgress:h,milestoneStatus:p,consultantDistribution:this.analyzeConsultantDistribution(e)}}static async updateStudentStatus(t,e){await a.db.student.update({where:{id:t},data:{certificationStatus:e}})}static async getStudentSessions(t,e={}){let{status:s,limit:r=20,offset:n=0}=e,i={studentId:t};s&&s.length>0&&(i.status={in:s});let u=await a.db.consultationSession.findMany({where:i,include:{consultant:{include:{user:!0}},videoSession:!0},orderBy:{scheduledStart:"desc"},take:r,skip:n}),o=await a.db.consultationSession.count({where:i});return{sessions:u,total:o,hasMore:n+r<o}}static calculateSessionDuration(t){return t.actualStart&&t.actualEnd?(new Date(t.actualEnd).getTime()-new Date(t.actualStart).getTime())/36e5:(new Date(t.scheduledEnd).getTime()-new Date(t.scheduledStart).getTime())/36e5}static estimateCompletionDate(t,e,s){if(t>=40)return null;let a=s.filter(t=>"COMPLETED"===t.status&&t.consultantVerifiedAt);if(0===a.length)return null;let r=new Date(Math.min(...a.map(t=>new Date(t.scheduledStart).getTime()))),n=t/Math.max((new Date(Math.max(...a.map(t=>new Date(t.scheduledStart).getTime()))).getTime()-r.getTime())/6048e5,1);if(n<=0)return null;let i=new Date;return i.setDate(i.getDate()+(40-t)/n*7),i}static calculateWeeklyProgress(t){let e=t.filter(t=>"COMPLETED"===t.status&&t.consultantVerifiedAt),s={};return e.forEach(t=>{let e=this.getWeekStart(new Date(t.scheduledStart)).toISOString().split("T")[0];s[e]||(s[e]={hours:0,sessions:0}),s[e].hours+=this.calculateSessionDuration(t),s[e].sessions+=1}),Object.entries(s).map(([t,e])=>({week:t,hours:e.hours,sessions:e.sessions})).sort((t,e)=>t.week.localeCompare(e.week))}static getWeekStart(t){let e=new Date(t),s=e.getDay(),a=e.getDate()-s+(0===s?-6:1);return new Date(e.setDate(a))}static getMilestoneStatus(t){let e=[{name:"Getting Started",hours:0},{name:"First 10 Hours",hours:10},{name:"Quarter Complete",hours:25},{name:"Halfway There",hours:20},{name:"Almost There",hours:30},{name:"Final Stretch",hours:35},{name:"Certification Ready",hours:40}],s=e[0],a=e[1];for(let r=0;r<e.length-1;r++)if(t>=e[r].hours&&t<e[r+1].hours){s=e[r],a=e[r+1];break}let r=a.hours>s.hours?(t-s.hours)/(a.hours-s.hours)*100:100;return{currentMilestone:s.name,nextMilestone:a.name,progressToNext:Math.min(r,100)}}static analyzeConsultantDistribution(t){let e={};return t.forEach(t=>{if("COMPLETED"===t.status&&t.consultantVerifiedAt){let s=t.consultant.id,a=`${t.consultant.user.firstName} ${t.consultant.user.lastName}`;e[s]||(e[s]={consultantId:s,consultantName:a,hours:0,sessions:0}),e[s].hours+=this.calculateSessionDuration(t),e[s].sessions+=1}}),Object.values(e).sort((t,e)=>e.hours-t.hours)}}}};var e=require("../../../../../webpack-runtime.js");e.C(t);var s=t=>e(e.s=t),a=e.X(0,[267,814],()=>s(5893));module.exports=a})();