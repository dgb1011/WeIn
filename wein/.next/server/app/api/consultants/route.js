(()=>{var e={};e.id=6452,e.ids=[6452],e.modules={3524:e=>{"use strict";e.exports=require("@prisma/client")},399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9348:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},412:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},8893:e=>{"use strict";e.exports=require("buffer")},4770:e=>{"use strict";e.exports=require("crypto")},6162:e=>{"use strict";e.exports=require("stream")},1764:e=>{"use strict";e.exports=require("util")},8038:(e,t,i)=>{"use strict";i.r(t),i.d(t,{patchFetch:()=>w,routeModule:()=>m,serverHooks:()=>v,workAsyncStorage:()=>h,workUnitAsyncStorage:()=>b});var r={};i.r(r),i.d(r,{DELETE:()=>p,GET:()=>c,POST:()=>y,PUT:()=>f});var a=i(2412),s=i(4293),n=i(4147),o=i(7856),l=i(4871);class u{static async getConsultantProfile(e){try{let t=await l.db.consultant.findUnique({where:{id:e},include:{user:!0}});if(!t)return null;return{id:t.id,userId:t.userId,bio:t.bio,specialties:t.specialties||[],hourlyRate:t.hourlyRate||0,isActive:t.isActive,timezone:t.timezone||"UTC",createdAt:t.createdAt,updatedAt:t.updatedAt}}catch(e){throw console.error("Error fetching consultant profile:",e),Error("Failed to fetch consultant profile")}}static async updateConsultantProfile(e,t){try{return await l.db.consultant.update({where:{id:e},data:{bio:t.bio,specialties:t.specialties,hourlyRate:t.hourlyRate,isActive:t.isActive,timezone:t.timezone,updatedAt:new Date}}),await this.getConsultantProfile(e)}catch(e){throw console.error("Error updating consultant profile:",e),Error("Failed to update consultant profile")}}static async getConsultantAvailability(e,t){try{let i={consultantId:e};return t&&(i.OR=[{specificDate:{gte:t.start,lte:t.end}},{availabilityType:"RECURRING_WEEKLY"}]),(await l.db.consultantAvailability.findMany({where:i,orderBy:[{dayOfWeek:"asc"},{startTime:"asc"}]})).map(e=>({id:e.id,consultantId:e.consultantId,availabilityType:e.availabilityType,dayOfWeek:e.dayOfWeek||void 0,specificDate:e.specificDate||void 0,startTime:e.startTime,endTime:e.endTime,maxSessions:e.maxSessions,bufferMinutes:e.bufferMinutes,isAvailable:e.isAvailable,bookingWindowDays:e.bookingWindowDays,minimumNoticeHours:e.minimumNoticeHours,timezone:e.timezone,recurringPattern:e.recurringPattern}))}catch(e){throw console.error("Error fetching consultant availability:",e),Error("Failed to fetch consultant availability")}}static async addAvailabilitySlot(e,t){try{let i=await l.db.consultantAvailability.create({data:{consultantId:e,availabilityType:t.availabilityType,dayOfWeek:t.dayOfWeek,specificDate:t.specificDate,startTime:t.startTime,endTime:t.endTime,maxSessions:t.maxSessions,bufferMinutes:t.bufferMinutes,isAvailable:t.isAvailable,bookingWindowDays:t.bookingWindowDays,minimumNoticeHours:t.minimumNoticeHours,timezone:t.timezone,recurringPattern:t.recurringPattern}});return{id:i.id,consultantId:i.consultantId,availabilityType:i.availabilityType,dayOfWeek:i.dayOfWeek||void 0,specificDate:i.specificDate||void 0,startTime:i.startTime,endTime:i.endTime,maxSessions:i.maxSessions,bufferMinutes:i.bufferMinutes,isAvailable:i.isAvailable,bookingWindowDays:i.bookingWindowDays,minimumNoticeHours:i.minimumNoticeHours,timezone:i.timezone,recurringPattern:i.recurringPattern}}catch(e){throw console.error("Error adding availability slot:",e),Error("Failed to add availability slot")}}static async updateAvailabilitySlot(e,t){try{let i=await l.db.consultantAvailability.update({where:{id:e},data:{availabilityType:t.availabilityType,dayOfWeek:t.dayOfWeek,specificDate:t.specificDate,startTime:t.startTime,endTime:t.endTime,maxSessions:t.maxSessions,bufferMinutes:t.bufferMinutes,isAvailable:t.isAvailable,bookingWindowDays:t.bookingWindowDays,minimumNoticeHours:t.minimumNoticeHours,timezone:t.timezone,recurringPattern:t.recurringPattern}});return{id:i.id,consultantId:i.consultantId,availabilityType:i.availabilityType,dayOfWeek:i.dayOfWeek||void 0,specificDate:i.specificDate||void 0,startTime:i.startTime,endTime:i.endTime,maxSessions:i.maxSessions,bufferMinutes:i.bufferMinutes,isAvailable:i.isAvailable,bookingWindowDays:i.bookingWindowDays,minimumNoticeHours:i.minimumNoticeHours,timezone:i.timezone,recurringPattern:i.recurringPattern}}catch(e){throw console.error("Error updating availability slot:",e),Error("Failed to update availability slot")}}static async deleteAvailabilitySlot(e){try{await l.db.consultantAvailability.delete({where:{id:e}})}catch(e){throw console.error("Error deleting availability slot:",e),Error("Failed to delete availability slot")}}static async getPendingVerifications(e){try{return(await l.db.consultationSession.findMany({where:{consultantId:e,status:"COMPLETED",consultantVerifiedAt:null},include:{student:{include:{user:!0}}},orderBy:{scheduledStart:"desc"}})).map(e=>({id:e.id,status:e.status,scheduledStart:e.scheduledStart,scheduledEnd:e.scheduledEnd,actualStart:e.actualStart,actualEnd:e.actualEnd,studentVerifiedAt:e.studentVerifiedAt,consultantVerifiedAt:e.consultantVerifiedAt,student:{id:e.student.id,user:{firstName:e.student.user.firstName,lastName:e.student.user.lastName,email:e.student.user.email}}}))}catch(e){throw console.error("Error fetching pending verifications:",e),Error("Failed to fetch pending verifications")}}static async verifySession(e,t,i){try{await l.db.consultationSession.update({where:{id:e,consultantId:t},data:{consultantVerifiedAt:new Date,consultantNotes:i}})}catch(e){throw console.error("Error verifying session:",e),Error("Failed to verify session")}}static async bulkVerifySessions(e,t){try{await l.db.consultationSession.updateMany({where:{id:{in:e},consultantId:t},data:{consultantVerifiedAt:new Date}})}catch(e){throw console.error("Error bulk verifying sessions:",e),Error("Failed to bulk verify sessions")}}static async getPaymentSummary(e,t){try{let i={consultantId:e,status:"COMPLETED",consultantVerifiedAt:{not:null}};t&&(i.scheduledStart={gte:t.start,lte:t.end});let r=await l.db.consultationSession.findMany({where:i,include:{consultant:!0},orderBy:{scheduledStart:"desc"}}),a=r.length,s=r.reduce((e,t)=>{let i=this.calculateSessionDuration(t);return e+i},0),n=r.reduce((e,t)=>{let i=this.calculateSessionDuration(t),r=t.consultant.hourlyRate||0;return e+i*r},0),o=this.calculateMonthlyBreakdown(r),u=(await l.db.consultationSession.findMany({where:{consultantId:e,status:"COMPLETED",consultantVerifiedAt:{not:null}}})).length*(r[0]?.consultant.hourlyRate||0),d=await l.db.consultantPayment.findFirst({where:{consultantId:e},orderBy:{paymentDate:"desc"}});return{totalEarnings:n,totalSessions:a,totalHours:s,averageHourlyRate:s>0?n/s:0,monthlyBreakdown:o,pendingPayments:u,lastPaymentDate:d?.paymentDate||null}}catch(e){throw console.error("Error fetching payment summary:",e),Error("Failed to fetch payment summary")}}static async getSessionHistory(e,t={}){try{let{status:i,limit:r=20,offset:a=0,dateRange:s}=t,n={consultantId:e};i&&i.length>0&&(n.status={in:i}),s&&(n.scheduledStart={gte:s.start,lte:s.end});let o=await l.db.consultationSession.findMany({where:n,include:{student:{include:{user:!0}}},orderBy:{scheduledStart:"desc"},take:r,skip:a}),u=await l.db.consultationSession.count({where:n});return{sessions:o.map(e=>({id:e.id,status:e.status,scheduledStart:e.scheduledStart,scheduledEnd:e.scheduledEnd,actualStart:e.actualStart,actualEnd:e.actualEnd,studentVerifiedAt:e.studentVerifiedAt,consultantVerifiedAt:e.consultantVerifiedAt,student:{id:e.student.id,user:{firstName:e.student.user.firstName,lastName:e.student.user.lastName,email:e.student.user.email}}})),total:u,hasMore:a+r<u}}catch(e){throw console.error("Error fetching session history:",e),Error("Failed to fetch session history")}}static calculateSessionDuration(e){return e.actualStart&&e.actualEnd?(new Date(e.actualEnd).getTime()-new Date(e.actualStart).getTime())/36e5:(new Date(e.scheduledEnd).getTime()-new Date(e.scheduledStart).getTime())/36e5}static calculateMonthlyBreakdown(e){let t={};return e.forEach(e=>{let i=new Date(e.scheduledStart).toISOString().slice(0,7);t[i]||(t[i]={earnings:0,sessions:0,hours:0});let r=this.calculateSessionDuration(e),a=e.consultant.hourlyRate||0;t[i].earnings+=r*a,t[i].sessions+=1,t[i].hours+=r}),Object.entries(t).map(([e,t])=>({month:e,earnings:t.earnings,sessions:t.sessions,hours:t.hours})).sort((e,t)=>t.month.localeCompare(e.month))}}var d=i(8772);async function c(e){try{let t=await (0,d.ts)(e);if(!t||"CONSULTANT"!==t.userType)return o.NextResponse.json({error:"Unauthorized"},{status:401});let{searchParams:i}=new URL(e.url),r=i.get("action");if("profile"===r){let e=await u.getConsultantProfile(t.id);return o.NextResponse.json({profile:e})}if("availability"===r){let e=i.get("startDate"),r=i.get("endDate"),a=e&&r?{start:new Date(e),end:new Date(r)}:void 0,s=await u.getConsultantAvailability(t.id,a);return o.NextResponse.json({availability:s})}if("pendingVerifications"===r){let e=await u.getPendingVerifications(t.id);return o.NextResponse.json({verifications:e})}if("paymentSummary"===r){let e=i.get("startDate"),r=i.get("endDate"),a=e&&r?{start:new Date(e),end:new Date(r)}:void 0,s=await u.getPaymentSummary(t.id,a);return o.NextResponse.json({summary:s})}if("sessionHistory"===r){let e=i.get("status")?.split(","),r=parseInt(i.get("limit")||"20"),a=parseInt(i.get("offset")||"0"),s=i.get("startDate"),n=i.get("endDate"),l=s&&n?{start:new Date(s),end:new Date(n)}:void 0,d=await u.getSessionHistory(t.id,{status:e,limit:r,offset:a,dateRange:l});return o.NextResponse.json(d)}return o.NextResponse.json({error:"Invalid action"},{status:400})}catch(e){return console.error("Consultant API Error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function y(e){try{let t=await (0,d.ts)(e);if(!t||"CONSULTANT"!==t.userType)return o.NextResponse.json({error:"Unauthorized"},{status:401});let{action:i,...r}=await e.json();if("addAvailability"===i){let e=await u.addAvailabilitySlot(t.id,r);return o.NextResponse.json({slot:e})}if("verifySession"===i){let{sessionId:e,notes:i}=r;return await u.verifySession(e,t.id,i),o.NextResponse.json({message:"Session verified successfully"})}if("bulkVerifySessions"===i){let{sessionIds:e}=r;return await u.bulkVerifySessions(e,t.id),o.NextResponse.json({message:"Sessions verified successfully"})}return o.NextResponse.json({error:"Invalid action"},{status:400})}catch(e){return console.error("Consultant API Error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function f(e){try{let t=await (0,d.ts)(e);if(!t||"CONSULTANT"!==t.userType)return o.NextResponse.json({error:"Unauthorized"},{status:401});let{action:i,...r}=await e.json();if("updateProfile"===i){let e=await u.updateConsultantProfile(t.id,r);return o.NextResponse.json({profile:e})}if("updateAvailability"===i){let{slotId:e,...t}=r,i=await u.updateAvailabilitySlot(e,t);return o.NextResponse.json({slot:i})}return o.NextResponse.json({error:"Invalid action"},{status:400})}catch(e){return console.error("Consultant API Error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function p(e){try{let t=await (0,d.ts)(e);if(!t||"CONSULTANT"!==t.userType)return o.NextResponse.json({error:"Unauthorized"},{status:401});let{searchParams:i}=new URL(e.url),r=i.get("slotId");if(r)return await u.deleteAvailabilitySlot(r),o.NextResponse.json({message:"Availability slot deleted successfully"});return o.NextResponse.json({error:"Slot ID required"},{status:400})}catch(e){return console.error("Consultant API Error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}let m=new a.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/consultants/route",pathname:"/api/consultants",filename:"route",bundlePath:"app/api/consultants/route"},resolvedPagePath:"/Users/dgb_1011/Desktop/WeIn/WeIn/wein/src/app/api/consultants/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:h,workUnitAsyncStorage:b,serverHooks:v}=m;function w(){return(0,n.patchFetch)({workAsyncStorage:h,workUnitAsyncStorage:b})}},5303:()=>{},8772:(e,t,i)=>{"use strict";i.d(t,{ts:()=>o});var r=i(3449),a=i.n(r),s=i(4871);let n=process.env.JWT_SECRET||"your-secret-key";async function o(e){try{let t=e.headers.get("authorization")?.replace("Bearer ","");if(!t)return null;let i=function(e){try{return a().verify(e,n)}catch(e){return null}}(t);if(!i)return null;return await s.db.user.findUnique({where:{id:i.userId},select:{id:!0,email:!0,firstName:!0,lastName:!0,userType:!0,status:!0}})}catch(e){return console.error("Auth middleware error:",e),null}}},4871:(e,t,i)=>{"use strict";i.d(t,{db:()=>a});var r=i(3524);let a=globalThis.prisma??new r.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}}});process.on("beforeExit",async()=>{await a.$disconnect()})}};var t=require("../../../webpack-runtime.js");t.C(e);var i=e=>t(t.s=e),r=t.X(0,[3267,8814,3449],()=>i(8038));module.exports=r})();